#1 데이터 불러오기- 엑셀형식

import pandas as pd
df = pd.read_csv('data/wine.csv')
df.head()
#위에서 다섯번째까지만 불러오기 
df.describe()
#전체 불러오기

#2 EDA&Feature Engineering

import matplotlib.pyplot as plt
%matplotlib inline

import seaborn as sns
sns.set()

facet = sns.FaceGrid(df, aspect = 4)
facet.map(sns.kdeplot, 'quality')
facet.add_legend()
plt.show()
#####################################facetgrid 복습

plt.figure(figsize = (20, 25))
sns.heatmap(df.corr(), annot=True, fmt = '.2f', square= True)
//###################################################################heatmap 복습

plt.show

#3 DATASET 구성하기

train_data = df.drop(['quality], axis = 1)
###############################################axis는 왜 1이지?
target_data = df['quality']

print(train_data.shape, target_data.shape)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(train_data, target_data, test_size = 0.2

print(train_data.shape, x_train.shape, x_test.shape)
########################################################### 무슨 말인지 모르겠다, sklearn 다시보기

#4 모델링과 학습

from sklearn.ensemble import RandomForestRegressor
forest = RandomForestRegressor(n_estimators = 100)
forest.fit(x_train, y_train)
#data 학습 
print('training set accuracy:', forest.score(x_train, y_train))
########################################################sklearn 다시 보기

#5 모델 검증 
y_predict = forest.predict(x_test)
print('test set accuracy:', forest.score(x_test, y_test))

#예측값과 실제 답 비교하기 
comparison = pd.DataFrame(y_test)

comparison['my_predict'] = y_predict
comparison.head()

comparison = round(comparison) # 내용물 모두 반올림
comparison.head()

evaluation = (comparison['quality'] == comparison['my_predict']) #예측결과와 실제답이 같은지 확인, 
evaluation.head() #예측과 실제답이 같을 경우에만 True

success = (evaluation == True.sum()  #예측 성공건수 카운팅
failure = (evaluation == False.sum()  예측 실패건수 카운팅

print(success/(success + failure))

# 이 밑에는 심화된 부분, 코알라에서 배우지 않은 부분으로 참고자료 

#평가 함수 만들기

def my_score(result, answer):
    comparison = pd.DataFrame(answer)

    comparison['my_predict'] = result
    comparison = round(comparison)
    
    evaluation = (comparison['quality'] == comparison['my_predict'])
    success = (evaluation == True).sum()
    failure = (evaluation == False).sum()
    
    return (success / (success + failure))

predict_train = forest.predict(x_train)
predict_test = forest.predict(x_test)
print('(category) train set accuracy', my_score(predict_train, y_train))
print('(category) test set accuracy', my_score(predict_test, y_test)) # 바로 위에서 구한 예측성공률과 같은 값이 나온다

#Linear Regression
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(x_train, y_train)

predict_train = lr.predict(x_train)
predict_test = lr.predict(x_test)
print('(category) train set accuracy', my_score(predict_train, y_train))
print('(category) test set accuracy', my_score(predict_test, y_test))

#Polynomial Linear Regression

from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

model = make_pipeline(PolynomialFeatures(2),
                      LinearRegression()).fit(x_train, y_train)
model.fit(x_train, y_train)

predict_train = model.predict(x_train)
predict_test = model.predict(x_test)
print('(category) train set accuracy', my_score(predict_train, y_train))
print('(category) test set accuracy', my_score(predict_test, y_test))

#Support Vecotr Machine 사용해보기
from sklearn.svm import SVR
model = SVR()
model.fit(x_train, y_train)

predict_train = model.predict(x_train)
predict_test = model.predict(x_test)
print('(category) train set accuracy', my_score(predict_train, y_train))
print('(category) test set accuracy', my_score(predict_test, y_test))
